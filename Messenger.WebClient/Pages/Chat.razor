@page "/Chat/{Id}"
@page "/Chat"

@using System.Net.Http
@using System.Net.Http.Json
@using System.Threading.Tasks
@using Messenger.Domain
@using Microsoft.AspNetCore.SignalR.Client;

@inject HttpClient Http
@inject NavigationManager NavigationManager


@if (groups == null)
{
    <p></p>
}
else
{
    <div class="container m-0 p-0" style="min-width:100%; min-height:100%; max-height:100%">
        <div Class="row align-items-start m-0 p-0" style="min-height: 724px; max-height: 100%; ">

            <div class="col-3 d-flex flex-column m-0 p-0">
                <ul class="list-group">
                    @foreach (var group in groups)
                        if (IsBelong(@group.Id))
                        {
                            <li Class="list-group-item  list-group-item-action" id="@group.Id" aria-controls="@group.Id" @onclick="@(e => gotoChat(group.Id))">
                                <a class="d-flex justify-content-start">
                                    <div Class="d-flex justify-content-center align-self-center rounded-circle bg-danger" Style="height:50px; width:50px;">
                                        <p class="align-self-center text-uppercase text-light font-light pt-4">
                                            <h3>
                                                @group.Name.FirstOrDefault()
                                            </h3>
                                        </p>
                                    </div>
                                    <div class="d-flex justify-content-center">
                                        <p class="align-self-center text-left pl-2 pt-4">
                                            <h5>
                                                @group.Name
                                            </h5>
                                        </p>
                                    </div>
                                </a>
                            </li>
                        }
                </ul>
            </div>

            <div Class="mt-auto col-9 m-0 p-0" style="min-height:100%; max-height:100%">
                <h2 mr-2>
                    @GetGroupName(Current.GroupId)
                </h2>
                <div class="row-10 pb-5 px-4" style="min-height:100%; max-height:630px; overflow: scroll; " id="chatContainer">
                    @foreach (var message in messages)
                        if (IsCurrentGroup(message.GroupID))
                            if (Current.UserId == @message.AuthorId)
                            {
                                <div class="d-flex align-items-end flex-column mt-3 ">
                                    <div class="d-flex justify-content-end">
                                        <div class="d-flex justify-content-center">
                                            <p class="align-self-center text-left pr-2 pt-2 mb-0">
                                                <h5>
                                                    @GetAuthorName(@message.AuthorId)
                                                </h5>
                                            </p>
                                        </div>
                                        <div Class="d-flex justify-content-center align-self-center rounded-circle bg-danger" Style="height:50px; width:50px;">
                                            <p class="align-self-center text-uppercase text-light font-light pt-4">
                                                <h3>
                                                    @GetAuthorName(@message.AuthorId).FirstOrDefault()
                                                </h3>
                                            </p>
                                        </div>
                                    </div>

                                    <div class="d-flex justify-content-end">
                                        <div class="mb-auto rounded-3 ml-2 p-2 d-flex justify-content-end align-items-start flex-column bg-light">
                                            <p class="mb-auto text-left" mt-2 ml-2 mr-2 mb-3 style="max-width:500px">
                                                <h5>
                                                    @message.Context
                                                </h5>
                                            </p>

                                            <div class="mb-auto d-flex mt-3">
                                                <p class="align-self-center text-left mb-0">
                                                    @message.SendDateTime
                                                </p>
                                                <p class="text-primary align-self-center text-left ml-5 mb-0" style="cursor:pointer" @onclick="@(e => MessageDelete(@message.Id))">
                                                    Удалить
                                                </p>
                                            </div>
                                        </div>
                                        <div Class="bg-transparent" Style="height:50px; width:50px;" />
                                    </div>

                                </div>
                            }
                            else
                            {
                                <div class="d-flex align-items-start flex-column mt-3 ">
                                    <div class="d-flex justify-content-start">
                                        <div Class="d-flex justify-content-center align-self-center rounded-circle bg-danger" Style="height:50px; width:50px;">
                                            <p class="align-self-center text-uppercase text-light font-light pt-4">
                                                <h3>
                                                    @GetAuthorName(@message.AuthorId).FirstOrDefault()
                                                </h3>
                                            </p>
                                        </div>
                                        <div class="d-flex justify-content-center">
                                            <p class="align-self-center text-left pl-2 pt-2 mb-0">
                                                <h5>
                                                    @GetAuthorName(@message.AuthorId)
                                                </h5>
                                            </p>
                                        </div>
                                    </div>


                                    <div class="d-flex justify-content-start">
                                        <div Class="bg-transparent" Style="height:50px; width:50px;" />
                                        <div class="mb-auto rounded-3 ml-2 p-2 d-flex align-items-start flex-column bg-light">
                                            <p class="mb-auto text-left" mt-2 ml-2 mr-2 mb-3 style="max-width: 500px">
                                                <h5>
                                                    @message.Context
                                                </h5>
                                            </p>

                                            <div class="mb-auto d-flex mt-3">
                                                <p class="align-self-center text-left mb-0">
                                                    @message.SendDateTime
                                                </p>
                                                <p class="text-light align-self-center text-left ml-5 mb-0">
                                                    Удалить
                                                </p>
                                            </div>
                                        </div>
                                    </div>

                                </div>
                            }
                </div>

                <div Class="row-2 mb-2 px-2 mx-4 d-flex flex-row">
                    <input form="OwnerId" class="form-control" @bind="@obj.Context" />
                    <input type="button" class="btn btn-primary" @onclick="@MessageSend" value="Отправить" />
                </div>
            </div>

        </div>
    </div>
}


@code {
    [Parameter]
    public string Id { get; set; }
    public string test;

    Message obj = new Message();

    private IEnumerable<Group> groups;
    private IEnumerable<Person> persons;
    private IEnumerable<GroupMembership> groupMemberships;
    private IEnumerable<Message> messages;
    [CascadingParameter] public HubConnection hubConnection { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        groups = await Http.GetFromJsonAsync<IEnumerable<Group>>("https://localhost:44351/API/Group");
        messages = await Http.GetFromJsonAsync<IEnumerable<Message>>("https://localhost:44351/API/Message");

        messages = from m in messages
                   orderby m.SendDateTime
                   select m;
    }

    protected override async Task OnInitializedAsync()
    {
        Current.GroupId = new Guid(Id);

        if (hubConnection == null)
        {
            hubConnection = new HubConnectionBuilder().WithUrl("https://localhost:44351/newMess").Build();
        }
        if (hubConnection.State == HubConnectionState.Disconnected)
        {
            await hubConnection.StartAsync();
        }

        hubConnection.On<string>("Send", async (message_hub) =>
        {
            //test = message_hub;
            await LoadChat();
            StateHasChanged();
        });

        await LoadChat();

    }

    void gotoChat(Guid GroupId)
    {
        Current.GroupId = GroupId;
    }

    String GetAuthorName(Guid AuthorId)
    {
        foreach (var person in persons)
        {
            if (person.Id == AuthorId)
            {
                return person.Surname + " " + person.Name + " " + person.Midname;
            }
        }

        return "";
    }

    String GetGroupName(Guid GroupId)
    {
        foreach (var group in groups)
        {
            if (group.Id == GroupId)
            {
                return group.Name;
            }
        }

        return "";
    }

    bool IsCurrentGroup(Guid GroupId)
    {
        if (GroupId == Current.GroupId)
        {
            return true;
        }

        return false;
    }

    bool IsOwner(Guid AuthorId)
    {
        if (Current.UserId == AuthorId)
        {
            return true;
        }

        return false;
    }

    async void MessageSend()
    {
        obj.AuthorId = Current.UserId;
        obj.SendDateTime = DateTime.Now;
        obj.GroupID = Current.GroupId;
        await Http.PostAsJsonAsync("https://localhost:44351/API/Message/", obj);
        await hubConnection.SendAsync("Send", obj.Context);

        await LoadChat();

        obj.Context = "";
        StateHasChanged();
    }

    bool IsBelong(Guid Id)
    {
        foreach (var groupMembership in groupMemberships)
        {
            if (groupMembership.GroupId == Id && groupMembership.PersonId == Current.UserId)
            {
                return true;
            }
        }

        return false;
    }

    async void MessageDelete(Guid MessageId)
    {
        await Http.DeleteAsync("https://localhost:44351/API/Message/" + MessageId);
        await hubConnection.SendAsync("Send", "Delete: " + MessageId);


        await LoadChat();
        StateHasChanged();
    }

    async Task LoadChat()
    {
        groups = await Http.GetFromJsonAsync<IEnumerable<Group>>("https://localhost:44351/API/Group");
        persons = await Http.GetFromJsonAsync<IEnumerable<Person>>("https://localhost:44351/API/Person");
        groupMemberships = await Http.GetFromJsonAsync<IEnumerable<GroupMembership>>("https://localhost:44351/API/GroupMembership");
        messages = await Http.GetFromJsonAsync<IEnumerable<Message>>("https://localhost:44351/API/Message");
        messages = from m in messages
                   orderby m.SendDateTime
                   select m;

        NavigationManager.NavigateTo("Chat/" + Id);
    }
}
